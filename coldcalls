<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Cold Call Lead Tracker</title> <style> * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; } .container { max-width: 1400px; margin: 0 auto; background: white; border-radius: 12px; box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1); overflow: hidden; } .header { background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%); color: white; padding: 30px; text-align: center; } .header h1 { font-size: 2.5rem; margin-bottom: 10px; font-weight: 300; } .header p { opacity: 0.9; font-size: 1.1rem; } .controls { padding: 20px 30px; background: #f8f9fa; border-bottom: 1px solid #e9ecef; display: flex; gap: 15px; align-items: center; flex-wrap: wrap; } .tab-buttons { display: flex; gap: 10px; } .tab-btn { background: white; color: #6c757d; border: 2px solid #e9ecef; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 500; transition: all 0.3s ease; } .tab-btn.active { background: linear-gradient(135deg, #3498db 0%, #2980b9 100%); color: white; border-color: #2980b9; } .tab-btn:hover:not(.active) { background: #e9ecef; border-color: #adb5bd; } .download-btn { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 16px; font-weight: 500; transition: all 0.3s ease; box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3); margin-left: auto; } .download-btn:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4); } .table-container { overflow-x: auto; padding: 0 30px 30px; } .tab-content { display: none; } .tab-content.active { display: block; } .remarks-view { padding: 20px 0; } .remark-card { background: white; border: 1px solid #e9ecef; border-radius: 8px; margin-bottom: 15px; padding: 20px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); transition: all 0.3s ease; } .remark-card:hover { box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); transform: translateY(-2px); } .remark-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; flex-wrap: wrap; gap: 10px; } .remark-title { font-weight: 600; font-size: 18px; color: #2c3e50; } .remark-meta { display: flex; gap: 15px; align-items: center; flex-wrap: wrap; } .remark-location { color: #7f8c8d; font-size: 14px; background: #f8f9fa; padding: 4px 8px; border-radius: 4px; } .remark-phone { font-family: 'Courier New', monospace; color: #27ae60; font-size: 13px; background: #e8f5e8; padding: 4px 8px; border-radius: 4px; } .follow-up-badge { padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600; text-transform: uppercase; } .follow-up-yes { background: #d4edda; color: #155724; } .follow-up-no { background: #f8d7da; color: #721c24; } .remark-content { background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid #3498db; font-size: 14px; line-height: 1.5; } .remark-content textarea { width: 100%; border: none; background: transparent; resize: vertical; min-height: 60px; font-family: inherit; font-size: 14px; line-height: 1.5; } .remark-content textarea:focus { outline: none; } .empty-remarks { text-align: center; padding: 40px; color: #6c757d; } table { width: 100%; border-collapse: collapse; margin-top: 20px; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05); } th { background: linear-gradient(135deg, #3498db 0%, #2980b9 100%); color: white; padding: 16px 12px; text-align: left; font-weight: 600; font-size: 14px; text-transform: uppercase; letter-spacing: 0.5px; } td { padding: 14px 12px; border-bottom: 1px solid #e9ecef; vertical-align: middle; } tr:nth-child(even) { background-color: #f8f9fa; } tr:hover { background-color: #e3f2fd; transition: background-color 0.2s ease; } .name { font-weight: 600; color: #2c3e50; } .location { color: #7f8c8d; font-size: 14px; } .phone { font-family: 'Courier New', monospace; color: #27ae60; font-size: 13px; } .remarks-input { width: 100%; border: 1px solid #ddd; padding: 8px 12px; border-radius: 4px; font-size: 14px; transition: border-color 0.3s ease; } .remarks-input:focus { outline: none; border-color: #3498db; box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2); } .checkbox-container { display: flex; justify-content: center; align-items: center; } .follow-up-checkbox { width: 18px; height: 18px; cursor: pointer; accent-color: #3498db; } @media (max-width: 768px) { .header h1 { font-size: 2rem; } .container { margin: 10px; } .controls, .table-container { padding: 15px; } th, td { padding: 10px 8px; font-size: 13px; } } </style> </head> <body> <div class="container"> <div class="header"> <h1>Cold Call Lead Tracker</h1> <p>Track your leads, manage follow-ups, and close deals</p> </div> <div class="controls"> <div class="tab-buttons"> <button class="tab-btn active" onclick="switchTab('table')">üìä Table View</button> <button class="tab-btn" onclick="switchTab('remarks')">üìù Remarks View</button> </div> <button class="download-btn" onclick="downloadCSV()">üìä Download CSV</button> </div> <div class="table-container"> <div id="tableTab" class="tab-content active"> <table id="leadsTable"> <thead> <tr> <th>Name</th> <th>Location</th> <th>Phone Number</th> <th>Remarks</th> <th>Follow-up</th> </tr> </thead> <tbody> <tr> <td class="name">KKD Bar & Kitchen</td> <td class="location">Madhapur</td> <td class="phone">+91 81217 09999</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Few reviews; locally known; minimal digital presence"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">Cock & Bull</td> <td class="location">Madhapur</td> <td class="phone">+91 91542 85001</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Low-profile but busy; niche crowd"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">Club8</td> <td class="location">Begumpet/Kondapur</td> <td class="phone">Not publicly listed</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Very low online visibility; steady regulars"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">Ru ‚Äì Craft Bar</td> <td class="location">Jubilee Hills</td> <td class="phone">+91 73311 17814</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Craft bar with modest ratings; under‚Äëpromoted online"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">Tat Tvam Asi</td> <td class="location">Tellapur/Nallagandla</td> <td class="phone">+91 94406 20662</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Caf√©-bar style, limited online presence; word‚Äëof‚Äëmouth"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">The Hoppery</td> <td class="location">Jubilee Hills</td> <td class="phone">+91 95731 17862</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Microbrewery with local crowd; moderate reviews"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">Fat Pigeon ‚Äì Bar Hop</td> <td class="location">Jubilee Hills</td> <td class="phone">+91 91006 66101</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Busy hidden spot, low-key online; many nights crowded"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">The Moonshine Project</td> <td class="location">Film Nagar/Jubilee Hills</td> <td class="phone">+91 80998 90000</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Live‚Äëmusic lounge, moderate ratings, understated online profile"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">Lillie's Boho Cafe</td> <td class="location">Sainikpuri</td> <td class="phone">Not publicly listed</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Hidden caf√©-bar with low reviews; more local footfall"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> <tr> <td class="name">Tat Tvam Asi Caf√©</td> <td class="location">Tellapur region</td> <td class="phone">+91 94406 20662</td> <td><input type="text" class="remarks-input" placeholder="Add your notes..." value="Social‚Äëvibe caf√©‚Äëbar, low digital visibility"></td> <td class="checkbox-container"><input type="checkbox" class="follow-up-checkbox"></td> </tr> </tbody> </table> </div> <div id="remarksTab" class="tab-content"> <div class="remarks-view" id="remarksView"> <!-- Remarks will be populated here --> </div> </div> </div> </div> <script> function switchTab(tabName) { // Update tab buttons document.querySelectorAll('.tab-btn').forEach(btn => { btn.classList.remove('active'); }); event.target.classList.add('active'); // Update tab content document.querySelectorAll('.tab-content').forEach(content => { content.classList.remove('active'); }); if (tabName === 'table') { document.getElementById('tableTab').classList.add('active'); } else if (tabName === 'remarks') { document.getElementById('remarksTab').classList.add('active'); populateRemarksView(); } } function populateRemarksView() { const remarksView = document.getElementById('remarksView'); const table = document.getElementById('leadsTable'); const rows = table.querySelectorAll('tbody tr'); let remarksHTML = ''; rows.forEach((row, index) => { const name = row.cells[0].textContent; const location = row.cells[1].textContent; const phone = row.cells[2].textContent; const remarksInput = row.cells[3].querySelector('.remarks-input'); const followUpCheckbox = row.cells[4].querySelector('.follow-up-checkbox'); const remarkText = remarksInput.value || 'No remarks added yet...'; const followUpStatus = followUpCheckbox.checked; remarksHTML += ` <div class="remark-card"> <div class="remark-header"> <h3 class="remark-title">${name}</h3> <div class="remark-meta"> <span class="remark-location">${location}</span> <span class="remark-phone">${phone}</span> <span class="follow-up-badge ${followUpStatus ? 'follow-up-yes' : 'follow-up-no'}"> ${followUpStatus ? '‚úì Follow-up' : '‚óã No Follow-up'} </span> </div> </div> <div class="remark-content"> <textarea data-row-index="${index}" onchange="updateRemarkFromCard(this)" placeholder="Add your notes...">${remarkText === 'No remarks added yet...' ? '' : remarkText}</textarea> </div> </div> `; }); remarksView.innerHTML = remarksHTML; } function updateRemarkFromCard(textarea) { const rowIndex = parseInt(textarea.dataset.rowIndex); const table = document.getElementById('leadsTable'); const row = table.querySelectorAll('tbody tr')[rowIndex]; const remarksInput = row.cells[3].querySelector('.remarks-input'); remarksInput.value = textarea.value; } function downloadCSV() { const table = document.getElementById('leadsTable'); const rows = table.querySelectorAll('tr'); let csvContent = ''; // Add headers const headers = []; const headerCells = rows[0].querySelectorAll('th'); headerCells.forEach(cell => { headers.push('"' + cell.textContent.replace(/"/g, '""') + '"'); }); csvContent += headers.join(',') + '\n'; // Add data rows for (let i = 1; i < rows.length; i++) { const row = rows[i]; const rowData = []; // Name const nameCell = row.cells[0]; rowData.push('"' + nameCell.textContent.replace(/"/g, '""') + '"'); // Location const locationCell = row.cells[1]; rowData.push('"' + locationCell.textContent.replace(/"/g, '""') + '"'); // Phone Number const phoneCell = row.cells[2]; rowData.push('"' + phoneCell.textContent.replace(/"/g, '""') + '"'); // Remarks (from input field) const remarksInput = row.cells[3].querySelector('.remarks-input'); rowData.push('"' + remarksInput.value.replace(/"/g, '""') + '"'); // Follow-up (checkbox status) const followUpCheckbox = row.cells[4].querySelector('.follow-up-checkbox'); rowData.push(followUpCheckbox.checked ? 'Yes' : 'No'); csvContent += rowData.join(',') + '\n'; } // Create and download file const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' }); const link = document.createElement('a'); const url = URL.createObjectURL(blob); link.setAttribute('href', url); link.setAttribute('download', 'cold_call_leads_' + new Date().toISOString().split('T')[0] + '.csv'); link.style.visibility = 'hidden'; document.body.appendChild(link); link.click(); document.body.removeChild(link); } // Auto-save functionality (optional enhancement) document.addEventListener('DOMContentLoaded', function() { const inputs = document.querySelectorAll('.remarks-input'); const checkboxes = document.querySelectorAll('.follow-up-checkbox'); // Add subtle animations on interaction inputs.forEach(input => { input.addEventListener('focus', function() { this.parentElement.parentElement.style.transform = 'scale(1.01)'; this.parentElement.parentElement.style.transition = 'transform 0.2s ease'; }); input.addEventListener('blur', function() { this.parentElement.parentElement.style.transform = 'scale(1)'; }); }); checkboxes.forEach(checkbox => { checkbox.addEventListener('change', function() { const row = this.closest('tr'); if (this.checked) { row.style.backgroundColor = '#d4edda'; setTimeout(() => { row.style.backgroundColor = ''; }, 1000); } }); }); }); </script> </body> </html>
